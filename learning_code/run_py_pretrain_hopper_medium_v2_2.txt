run.py: main()
train_diffusion_agent.py: TrainDiffusionAgent.__init__()
train_agent.py: PreTrainAgent.__init__()
mlp_diffusion.py: DiffusionMLP.__init__()
modules.py: SinusoidalPosEmb.__init__()
mlp.py: ResidualMLP.__init__()
mlp.py: TwoLayerPreActivationResNetLinear.__init__()
diffusion.py: DiffusionModel.__init__()
[2024-11-18 17:39:58,148][root][INFO] - Number of network parameters: 553020
sampling.py: cosine_beta_schedule()
train_agent.py: EMA.__init__()
sequence.py: StitchedSequenceDataset.__init__()
sequence.py: StitchedSequenceDataset.make_indices()
[2024-11-18 17:39:58,853][agent.dataset.sequence][INFO] - Loaded dataset from /ssddata/qtguo/GENERAL_DATA//gym/hopper-medium-v2/train.npz
[2024-11-18 17:39:58,854][agent.dataset.sequence][INFO] - Number of episodes: 2186
[2024-11-18 17:39:58,854][agent.dataset.sequence][INFO] - States shape/type: (torch.Size([999906, 11]), torch.float32)
[2024-11-18 17:39:58,854][agent.dataset.sequence][INFO] - Actions shape/type: (torch.Size([999906, 3]), torch.float32)
scheduler.py: CosineAnnealingWarmupRestarts.__init__()
scheduler.py: CosineAnnealingWarmupRestarts.step()
scheduler.py: CosineAnnealingWarmupRestarts.get_lr()
scheduler.py: CosineAnnealingWarmupRestarts.init_lr()
train_agent.py: PreTrainAgent.reset_parameters()
train_diffusion_agent.py: TrainDiffusionAgent.run()
timer.py: Timer.__init__()
self.n_epochs =  3000
epoch =  0
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
train_agent.py: PreTrainAgent.step_ema()
train_agent.py: PreTrainAgent.reset_parameters()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
self.model =  DiffusionModel(
  (network): DiffusionMLP(
    (time_embedding): Sequential(
      (0): SinusoidalPosEmb()
      (1): Linear(in_features=16, out_features=32, bias=True)
      (2): Mish()
      (3): Linear(in_features=32, out_features=16, bias=True)
    )
    (mlp_mean): ResidualMLP(
      (layers): ModuleList(
        (0): Linear(in_features=39, out_features=512, bias=True)
        (1): TwoLayerPreActivationResNetLinear(
          (l1): Linear(in_features=512, out_features=512, bias=True)
          (l2): Linear(in_features=512, out_features=512, bias=True)
          (act): ReLU()
        )
        (2): Linear(in_features=512, out_features=12, bias=True)
        (3): Identity()
      )
    )
  )
)
before self.model.train
after self.model.train
diffusion.py: DiffusionModel.loss()
diffusion.py: DiffusionModel.p_losses()
diffusion.py: DiffusionModel.q_sample()
sampling.py: extract()
sampling.py: extract()
mlp_diffusion.py: DiffusionMLP.forward()
modules.py: SinusoidalPosEmb.forward()
mlp.py: ResidualMLP.forward()
mlp.py: TwoLayerPreActivationResNetLinear.forward()
